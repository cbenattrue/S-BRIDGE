/* 
*  DB Script Tool
*  Firebird - 2019-07-28 20:42:06
*  S
*/ 
CREATE DATABASE 's.fdb'
   USER 'SYSDBA' PASSWORD ''
   PAGE_SIZE 4096
   DEFAULT CHARACTER SET UTF8;

CONNECT 's.fdb';



/* 
*  S
*  S
*/ 
SET TERM ^ ;

EXECUTE BLOCK AS BEGIN
IF (exists(select 1 from rdb$relations where rdb$relation_name = 'S')) THEN 
    execute statement 'drop table S;';
END^

CREATE TABLE S (
    S INTEGER NOT NULL,
    S INTEGER NOT NULL,
    S INTEGER NOT NULL,
 CONSTRAINT PK_S PRIMARY KEY (S,S,S),
/*CONSTRAINT fk_S FOREIGN KEY (S) REFERENCES S(S) ON DELETE RESTRICT ON UPDATE RESTRICT,*/ 
CONSTRAINT fk_S FOREIGN KEY (S) REFERENCES S(S) ON DELETE RESTRICT ON UPDATE RESTRICT,
CONSTRAINT fk_S FOREIGN KEY (S) REFERENCES S(S) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX idx_S_S ON S (S);
CREATE UNIQUE INDEX idx_S_S ON S (S);
CREATE UNIQUE INDEX idx_S_S ON S (S);


CREATE GENERATOR Gen_S_S;

/*
CREATE TRIGGER BI_S FOR S
    ACTIVE BEFORE INSERT
AS
BEGIN
    IF (NEW.S IS NULL) or (NEW.S = 0) THEN
        NEW.S = GEN_ID(Gen_S_S, 1);
END
*/
COMMIT;
CREATE GENERATOR Gen_S_S;

/*
CREATE TRIGGER BI_S FOR S
    ACTIVE BEFORE INSERT
AS
BEGIN
    IF (NEW.S IS NULL) or (NEW.S = 0) THEN
        NEW.S = GEN_ID(Gen_S_S, 1);
END
*/
COMMIT;
CREATE GENERATOR Gen_S_S;

/*
CREATE TRIGGER BI_S FOR S
    ACTIVE BEFORE INSERT
AS
BEGIN
    IF (NEW.S IS NULL) or (NEW.S = 0) THEN
        NEW.S = GEN_ID(Gen_S_S, 1);
END
*/
COMMIT;

SET TERM ; ^


/* 
*  S
*  S
*/ 
SET TERM ^ ;

EXECUTE BLOCK AS BEGIN
IF (exists(select 1 from rdb$relations where rdb$relation_name = 'S')) THEN 
    execute statement 'drop table S;';
END^

CREATE TABLE S (
    S INTEGER NOT NULL,
    S INTEGER NOT NULL,
    S INTEGER NOT NULL,
 CONSTRAINT PK_S PRIMARY KEY (S,S,S)
);

CREATE UNIQUE INDEX idx_S_S ON S (S);
CREATE UNIQUE INDEX idx_S_S ON S (S);
CREATE UNIQUE INDEX idx_S_S ON S (S);


CREATE GENERATOR Gen_S_S;

/*
CREATE TRIGGER BI_S FOR S
    ACTIVE BEFORE INSERT
AS
BEGIN
    IF (NEW.S IS NULL) or (NEW.S = 0) THEN
        NEW.S = GEN_ID(Gen_S_S, 1);
END
*/
COMMIT;
CREATE GENERATOR Gen_S_S;

/*
CREATE TRIGGER BI_S FOR S
    ACTIVE BEFORE INSERT
AS
BEGIN
    IF (NEW.S IS NULL) or (NEW.S = 0) THEN
        NEW.S = GEN_ID(Gen_S_S, 1);
END
*/
COMMIT;
CREATE GENERATOR Gen_S_S;

/*
CREATE TRIGGER BI_S FOR S
    ACTIVE BEFORE INSERT
AS
BEGIN
    IF (NEW.S IS NULL) or (NEW.S = 0) THEN
        NEW.S = GEN_ID(Gen_S_S, 1);
END
*/
COMMIT;

SET TERM ; ^


/* 
*  S
*  S
*/ 
SET TERM ^ ;

EXECUTE BLOCK AS BEGIN
IF (exists(select 1 from rdb$relations where rdb$relation_name = 'S')) THEN 
    execute statement 'drop table S;';
END^

CREATE TABLE S (
    S INTEGER NOT NULL,
    S INTEGER NOT NULL,
    S INTEGER NOT NULL,
 CONSTRAINT PK_S PRIMARY KEY (S,S,S)
);

CREATE UNIQUE INDEX idx_S_S ON S (S);
CREATE UNIQUE INDEX idx_S_S ON S (S);
CREATE UNIQUE INDEX idx_S_S ON S (S);


CREATE GENERATOR Gen_S_S;

/*
CREATE TRIGGER BI_S FOR S
    ACTIVE BEFORE INSERT
AS
BEGIN
    IF (NEW.S IS NULL) or (NEW.S = 0) THEN
        NEW.S = GEN_ID(Gen_S_S, 1);
END
*/
COMMIT;
CREATE GENERATOR Gen_S_S;

/*
CREATE TRIGGER BI_S FOR S
    ACTIVE BEFORE INSERT
AS
BEGIN
    IF (NEW.S IS NULL) or (NEW.S = 0) THEN
        NEW.S = GEN_ID(Gen_S_S, 1);
END
*/
COMMIT;
CREATE GENERATOR Gen_S_S;

/*
CREATE TRIGGER BI_S FOR S
    ACTIVE BEFORE INSERT
AS
BEGIN
    IF (NEW.S IS NULL) or (NEW.S = 0) THEN
        NEW.S = GEN_ID(Gen_S_S, 1);
END
*/
COMMIT;

SET TERM ; ^